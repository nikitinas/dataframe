buildscript {
    repositories {
        mavenCentral()
        maven { url jupyterApiTCRepo }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-jupyter-api-gradle-plugin:$jupyterApiVersion"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.dataframe.generator"
    id "ru.ileasile.kotlin.publisher" version "$libsPublisherVersion"
}

apply plugin: "org.jetbrains.kotlin.jupyter.api"

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }
    maven { url jupyterApiTCRepo }
}

configurations {
    testImplementation.extendsFrom compileOnly
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "org.apache.commons:commons-csv:1.8"
    implementation "com.beust:klaxon:5.5"
    implementation "com.github.jkcclemens:khttp:-SNAPSHOT"

    testImplementation "junit:junit:4.12"
    testImplementation "io.kotest:kotest-assertions-core:4.5.0"
    testImplementation "org.jetbrains.kotlinx:kotlin-jupyter-kernel:$jupyterApiVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-scripting-jvm"

    // needed to work around https://youtrack.jetbrains.com/issue/KT-15064
    compileOnly "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.withType(JavaCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

group 'org.jetbrains.kotlinx'

def detectVersion() {
    def buildNumber = rootProject.findProperty("build.number")
    if(buildNumber != null) {
        if (hasProperty("build.number.detection")) {
            return property('version') + "-dev-" + buildNumber
        } else {
            return buildNumber
        }
    }
    else if(hasProperty("release")) {
        return property('version')
    } else {
        return property('version') + "-dev"
    }
}

task detectVersionForTC {
    doLast {
        println("##teamcity[buildNumber '$version']")
    }
}

version detectVersion()

kotlinPublications {
    sonatypeSettings(
            project.findProperty("kds.sonatype.user"),
            project.findProperty("kds.sonatype.password"),
            "dataframe project, v. ${project.version}"
    )

    signingCredentials(
            project.findProperty("kds.sign.key.id"),
            project.findProperty("kds.sign.key.private"),
            project.findProperty("kds.sign.key.passphrase")
    )

    pom {
        use(ru.ileasile.kotlin.PomUtilKt) {
            githubRepo("nikitinas", "dataframe")
            inceptionYear.set("2021")
            licenses {
                apache2()
            }
            developers {
                developer("nikitinas", "Anatoly Nikitin", "Anatoly.Nikitin@jetbrains.com")
            }
        }
    }

    publication {
        publicationName = "api"
        artifactId = projectName
        description = "Data processing in Kotlin"
        packageName = artifactId
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes"]
    }
}
